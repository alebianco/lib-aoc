import { isIterable } from './isIterable.js'

/**
 * Test whether the {@link predicate} holds for all values generated by the {@link source}.
 *
 * The source will be consumed in the process.
 *
 * @example
 * every([true, true, false]); // returns false
 * @example
 * every([2, 4, 6], (n) => n % 2 === 0); // returns true
 *
 * @requires module:itertools.isIterable
 *
 * @template T
 * @param {Iterable<T>} source where to take the values from
 * @param {Predicate<T>} [predicate=Boolean] a function to test each value
 * @returns {boolean} true if each value matches the predicate, otherwise false
 *
 * @throws {TypeError} when {@link source} is not an {@link Iterable}
 * @throws {TypeError} when {@link predicate} is not an function
 */
export function every (source, predicate = Boolean) {
  if (!isIterable(source)) {
    throw new TypeError(`Argument 'source' should be iterable, received ${source} (${typeof source}).`)
  }

  for (const element of source) {
    if (!predicate(element)) {
      return false
    }
  }
  return true
}
